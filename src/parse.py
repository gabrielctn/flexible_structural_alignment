"""
.. module:: Parse
   :synopsis: This module implements parsing functions.
"""

# Third-party modules
import re
from Bio.PDB import Dice


def parse_tm_align(tm_align_res):
    """
    This function parses TMalign's terminal output.
    It retrieves:
    1. TMscore for chain 1 (normalized by the length of chain 1)
    2. TMscore for chain 2 (normalized by the length of chain 2)
    3. RMSD
    4. Alignment length

    Args:
        tm_align_res (list): Terminal's output of TMalign

    Returns:
        Tuple: (tm_score1, tm_score2, rmsd, aligned_length)
    """
    tm_score_regex = re.compile("^TM-score= (\\d+\\.\\d+).*$")
    rmsd_regex = re.compile("^.*RMSD=\\s+(\\d+\\.\\d+).*$")
    aligned_len_regex = re.compile("^Aligned length=\\s*(\\d+).*$")

    tm_score1 = None
    tm_score2 = None
    rmsd = None
    aligned_len = None

    flag = False
    for line in tm_align_res:
        tm_score_found = re.search(tm_score_regex, line)
        rmsd_found = re.search(rmsd_regex, line)
        aligned_len_found = re.search(aligned_len_regex, line)
        if tm_score_found:
            if flag:  # Get 2nd TM-score
                tm_score2 = float(tm_score_found.group(1))
            else:     # Get 1st TM-score
                tm_score1 = float(tm_score_found.group(1))
                flag = True
        if rmsd_found:
            rmsd = float(rmsd_found.group(1))
        if aligned_len_found:
            aligned_len = int(aligned_len_found.group(1))
    return (tm_score1, tm_score2, rmsd, aligned_len)


def parse_protein_peeling(peeling_res):
    """
    This function parses the output of Protein Peeling software.

    Args:
        peeling_res (str): Terminal's output of Protein Peeling 3 software.

    Returns:
        dictionary: Number of
    """
    peeling_dict = {"NB_PU": [], "PU_bounds": []}
    res_line_regex = re.compile("^[^#].*$")
    for line in peeling_res:
        # Looking for lines not starting with "#"
        res_line_found = re.search(res_line_regex, line)
        if res_line_found:
            res_line = res_line_found.group(0).split()
            peeling_dict["NB_PU"].append(int(res_line[4]))
            peeling_dict["PU_bounds"].append([(x, y) for x, y in zip(res_line[5::2], res_line[6::2])])
    return peeling_dict


def write_pdb_portion(structure, chain_id, start, end, filename):
    """
    This function writes down a selected portion of a PDB.

    Args:
        structure (PDB Structure): The PDB structure generated by the PDBparser.
        chain_id (str): The chain ID of the portion to save.
        start (int): The starting residue index.
        end (int): The ending residue index.
        filename (str): the name of the file to save.
    """
    Dice.extract(structure, chain_id, start, end, filename)
